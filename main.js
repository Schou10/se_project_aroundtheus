!function(){"use strict";class e{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers})}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers})}updateUserInfo(e){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)})}updateUserAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})})}addNewCard(e){return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}addLike(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers})}removeLike(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}}new e({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authourization:"Bearer  91b601cc-d5b2-405d-a21a-614e7e8f57e7","Content-Type":"application/json"}});class t{constructor(e,t,s,r,n){this._id=e._id,this._name=e.name,this._link=e.link,this._isLiked=e.isLiked,this._userId=e.owner,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteSubmit=r,this._handleCardLike=n,this._element=this._getTemplate()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleCardLike(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteSubmit(this)})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}isLiked(){return this._isLiked}updateLikes(e){this._isLiked=e,this.toggleLikeIcon()}toggleLikeIcon(){this._likeButton.classList.toggle("card__like-button-active",this._isLiked)}getId(){return this._id}removeCard(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardImageElement.setAttribute("src",this._link),this._cardImageElement.setAttribute("alt",this._name),this._cardElement.querySelector(".card__title").textContent=this._name,this.toggleLikeIcon(),this._setEventListeners(),this._cardElement}}class s{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_setEventListeners(){this._toggleButtonState(),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._form.addEventListener("reset",(()=>{setTimeout((()=>{this._toggleButtonState()}),0)}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}const r={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};class n{constructor(e){this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscapeClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscapeClose)}_handleEscapeClose=e=>{"Escape"!==e.key&&"Esc"!==e.key||this.close()};setEventListeners(){this._closeButton=this._popupElement.querySelector(".modal__close"),this._closeButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}class i extends n{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this.inputList=this._popupForm.querySelectorAll(".modal__input"),this.submitButton=this._popupForm.querySelector(".modal__button")}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)}))}_getInputValues(){const e={};return this.inputList.forEach((t=>{e[t.name]=t.value.trim()})),e}setInputValues(e){console.log(e),this.inputList.forEach((t=>{t.value=e[t.name]}))}}const a=new e({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"91b601cc-d5b2-405d-a21a-614e7e8f57e7","Content-Type":"application/json"}}),o=new class{constructor(e,t){let{data:s,renderer:r}=e;this._data=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItems(e){this._container.prepend(e)}}({renderer:e=>{const t=B(e);o.addItems(t)}},".galary__cards"),l=new class{constructor(e,t,s){this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,about:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){e.name&&(this._nameElement.textContent=e.name),e.about&&(this._jobElement.textContent=e.about),e.avatar&&(this._avatarElement.src=e.avatar)}}("#name","#description","#avatar");a.getUserInfo().then((e=>{l.setUserInfo({name:e.name,about:e.about,avatar:e.avatar})})).catch((e=>{console.error(`Error fetching user info: ${e}`)})),a.getInitialCards().then((e=>{o.renderItems(e)})).catch((e=>{console.error(`Error fetcting cards: ${e}`)}));const d=new i("#profile-edit-modal",(function(e){x(!0,d),a.updateUserInfo({name:e.name,about:e.about}).then((e=>{l.setUserInfo({name:e.name,about:e.about||e.dascription||e.bio})})).catch((e=>console.error(`Error updating profile: ${e}`))).finally((()=>{x(!1,d),d.close()}))})),u=new i("#add-card-modal",(function(e){const t={name:e.title,link:e.url};x(!0,u),a.addNewCard(t).then((e=>{const t=B(e);o.addItems(t),u.close(),g.reset(),S.disableButton()})).catch((e=>{console.error(`Error adding card: ${e}`)})).finally((()=>{x(!1,u)}))})),c=new class extends n{constructor(e,t){super(e),this._popupImage=this._popupElement.querySelector(".modal__image"),this._popupTitle=this._popupElement.querySelector(".modal__card-title")}open(e){this._popupImage.src=e.link,this._popupImage.alt=e.name,this._popupTitle.textContent=e.name,super.open()}}("#image-modal",q),h=new class extends n{constructor(e){super(e),this.confirmButton=this._popupElement.querySelector(".modal__button")}setSubmitFunction(e){this._handleConfirm=e}setEventListeners(){super.setEventListeners()}}("#delete-modal"),_=new i("#avatar-modal",(function(e){x(!0,_),a.updateUserAvatar({avatar:e.url}).then((e=>{l.setUserInfo({avatar:e.avatar})})).catch((e=>console.error(`Error updating avatar: ${e}`))).finally((()=>{x(!1,_),_.close(),k.reset()}))})),m=document.querySelector("#profile-edit-button"),p=document.querySelector("#profile-add-button"),E=document.querySelector("#avatar-overlay"),v=document.querySelector("#name-input"),b=document.querySelector("#description-input"),f=document.forms["profile-edit-form"],g=document.forms["add-card-form"],L=document.forms["delete-form"],k=document.forms["avatar-form"],C=new s(r,f),S=new s(r,g),y=new s(r,L),I=new s(r,k);function B(e){return new t(e,"#card-template",q,U,w).getView()}function q(e){c.open(e)}function U(e){x(!0,h),h.setSubmitFunction((()=>{a.deleteCard(e._id).then((e=>{console.log(e)})).catch((e=>{console.error(`Error deleting card ${e}`)})).finally((()=>{x(!1,h),h.close(),e.removeCard()}))})),h.open()}function w(e){(e.isLiked()?a.removeLike(e.getId()):a.addLike(e.getId())).then((t=>{e.updateLikes(t.isLiked)})).catch((e=>console.error(`Error updating like status: ${e}`)))}function $(e){const t=l.getUserInfo();v.value=t.name,b.value=t.about,e.open()}function x(e,t){if(e){if(t==h)return t.confirmButton.textContent="Deleating Card";if(t==u)return t.submitButton.textContent="Creating Card";if(t==d||_)return t.submitButton.textContent="Saving"}else{if(t==h)return t.confirmButton.textContent="Yes";if(t==u)return t.submitButton.textContent="Create";if(t==d||_)return t.submitButton.textContent="Save"}}C.enableValidation(),S.enableValidation(),y.enableValidation(),I.enableValidation(),E.addEventListener("click",(()=>{$(_)})),m.addEventListener("click",(()=>{$(d)})),p.addEventListener("click",(()=>{u.open()})),d.setEventListeners(),u.setEventListeners(),c.setEventListeners(),h.setEventListeners(),_.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,