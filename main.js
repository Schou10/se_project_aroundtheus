!function(){"use strict";class e{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResonse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkResonse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResonse)}updateUserInfo(e){return console.log("Updating user with:",e),fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResonse)}updateUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})}).then(this._checkResonse)}addNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResonse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResonse)}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}new e({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authourization:"Bearer  91b601cc-d5b2-405d-a21a-614e7e8f57e7","Content-Type":"application/json"}});class t{constructor(e,t,s,i,r){this._id=e._id,this._name=e.name,this._link=e.link,this._likes=e.likes||[],this._isLiked=this._likes.some((e=>e._id===this._userId)),this._userId=e.owner,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteSubmit=i,this._handleCardLike=r,this._element=this._getTemplate()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleCardLike(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteSubmit(this)})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}isLiked(){return this._isliked}updateLikes(e,t){console.log("Likes list: ",this._likes,"New Like: ",t),this._likes.some((e=>e._id===this._userId))?(console.log("Like Removed"),this._likes.pop({_id:e,isLiked:t})):(console.log("Like Added"),this._likes.push()),console.log("Likes list: ",this._likes,"like id: ",this._likes[0]._id),this._isLiked=this._likes.some((e=>e._id===this._userId)),console.log(this._isLiked),this._element.querySelector(".card__like-count").textContent=this._likes.length}toggleLikeIcon(){console.log("This like button is",this._isLiked),this._likeButton.classList.toggle("card__like-button-active",this._isLiked),console.log("Like button toggled",this._isLiked)}getId(){return this._id}removeCard(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardImageElement.setAttribute("src",this._link),this._cardImageElement.setAttribute("alt",this._name),this._cardElement.querySelector(".card__title").textContent=this._name,this._setEventListeners(),this._cardElement}}class s{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_setEventListeners(){this._toggleButtonState(),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._form.addEventListener("reset",(()=>{setTimeout((()=>{this._toggleButtonState()}),0)}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}const i={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};class r{constructor(e){this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscapeClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscapeClose)}_handleEscapeClose=e=>{"Escape"!==e.key&&"Esc"!==e.key||this.close()};setEventListeners(){this._closeButton=this._popupElement.querySelector(".modal__close"),this._closeButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}class n extends r{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this.inputList=this._popupForm.querySelectorAll(".modal__input")}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t),this._popupForm.reset()}))}_getInputValues(){const e={};return this.inputList.forEach((t=>{e[t.name]=t.value.trim()})),e}setInputValues(e){console.log(e),this.inputList.forEach((t=>{t.value=e[t.name]}))}}const o=new e({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"91b601cc-d5b2-405d-a21a-614e7e8f57e7","Content-Type":"application/json"}}),a=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(){this._data.forEach((e=>{this._renderer(e)}))}addItems(e){this._container.prepend(e)}clearItems(){this._container.innerHTML=""}renderInitialItems(e){this.clearItems(),e.forEach((e=>{this._renderer(e)}))}}({renderer:e=>{const t=q(e);a.addItems(t)}},".galary__cards"),l=new class{constructor(e,t,s){this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,about:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){e.name&&(this._nameElement.textContent=e.name),e.about&&(this._jobElement.textContent=e.about),e.avatar&&(this._avatarElement.src=e.avatar)}}("#name","#description","#avatar");o.getUserInfo().then((e=>{l.setUserInfo({name:e.name,about:e.about,avatar:e.avatar})})).catch((e=>{console.error(`Error fetching user info: ${e}`)})),o.getInitialCards().then((e=>{a.renderInitialItems(e)})).catch((e=>{console.error(`Error fetcting initial cards: ${e}`)}));const d=new n("#profile-edit-modal",(function(e){console.log(e),o.updateUserInfo({name:e.name,about:e.about}).then((e=>{l.setUserInfo({name:e.name,about:e.about||e.dascription||e.bio}),d.close()})).catch((e=>console.error(`Error updating profile: ${e}`)))})),c=new n("#add-card-modal",(function(e){const t={name:e.title,link:e.url};o.addNewCard(t).then((e=>{const t=q(e);a.addItems(t),c.close(),L.reset(),y.disableButton()})).catch((e=>{console.error(`Error adding card: ${e}`)}))})),h=new class extends r{constructor(e,t){super(e),this._popupImage=this._popupElement.querySelector(".modal__image"),this._popupTitle=this._popupElement.querySelector(".modal__card-title")}open(e){this._popupImage.src=e.link,this._popupImage.alt=e.name,this._popupTitle.textContent=e.name,super.open()}}("#image-modal",w),u=new n("#delete-modal",U),_=new n("#avatar-modal",(function(e){o.updateUserAvatar({avatar:e.url}).then((e=>{l.setUserInfo({avatar:e.avatar}),_.close()})).catch((e=>console.error(`Error updating avatar: ${e}`)))})),m=document.querySelector("#profile-edit-button"),p=document.querySelector("#profile-add-button"),E=document.querySelector("#avatar-overlay"),v=document.querySelector("#name-input"),k=document.querySelector("#description-input"),b=document.querySelector("#avatar-url-input"),g=document.forms["profile-edit-form"],L=document.forms["add-card-form"],f=document.forms["delete-form"],I=document.forms["avatar-form"],S=new s(i,g),y=new s(i,L),C=new s(i,f),B=new s(i,I);function q(e){return new t(e,"#card-template",w,U,$).getView()}function w(e){h.open(e)}function U(e){if(e){const t=document.querySelector("#delete-confirm-button");u.open(),t.addEventListener("click",(function s(){e.removeCard(),o.deleteCard(e._id),u.close(),t.removeEventListener("click",s)}))}}function $(e){console.log(e),(e.isLiked()?o.removeLike(e.getId()):o.addLike(e.getId())).then((e=>e.json())).then((t=>{console.log("THis is the updated CardData: ",t),e.updateLikes(e.owner,t.isLiked),e.toggleLikeIcon()})).catch((e=>console.error(`Error updating like status: ${e}`)))}function T(e){const t=l.getUserInfo();v.value=t.name,k.value=t.about,b.value=t.avatar,e.open()}S.enableValidation(),y.enableValidation(),C.enableValidation(),B.enableValidation(),E.addEventListener("click",(()=>{T(_)})),m.addEventListener("click",(()=>{T(d)})),p.addEventListener("click",(()=>{c.open()})),d.setEventListeners(),c.setEventListeners(),h.setEventListeners(),u.setEventListeners(),_.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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OUNvSixFQUFLM0ksZ0JBQWdCLElBRXRCMEcsT0FBTUMsR0FBT2xLLFFBQVFtSyxNQUFNLCtCQUErQkQsTUFDL0QsQ0FFQSxTQUFTcUMsRUFBaUJDLEdBQ3hCLE1BQU1DLEVBQWNuRCxFQUFLekosY0FDekIyTCxFQUFjMUQsTUFBUTJFLEVBQVlqTSxLQUNsQ2lMLEVBQWEzRCxNQUFRMkUsRUFBWTVDLE1BQ2pDNkIsRUFBZ0I1RCxNQUFRMkUsRUFBWW5NLE9BQ3BDa00sRUFBTS9GLE1BQ1IsQ0E3R0FzRixFQUFrQjdGLG1CQUNsQjRFLEVBQWlCNUUsbUJBQ2pCOEYsRUFBb0I5RixtQkFDcEIrRixFQUFvQi9GLG1CQTZHcEI1RixFQUFPcUMsaUJBQWlCLFNBQVMsS0FBTTRKLEVBQWlCbkIsRUFBWSxJQUVwRUUsRUFBa0IzSSxpQkFBaUIsU0FBUyxLQUFNNEosRUFBaUJsQyxFQUFVLElBRTdFa0IsRUFBaUI1SSxpQkFBaUIsU0FBUyxLQUN6QzhILEVBQWFoRSxNQUFNLElBS3JCNEQsRUFBVXRELG9CQUNWMEQsRUFBYTFELG9CQUNiZ0UsRUFBV2hFLG9CQUNYb0UsRUFBWXBFLG9CQUNacUUsRUFBWXJFLG1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvQVBJLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL2NhcmQuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICB0aGlzLl9iYXNlVXJsID0gb3B0aW9ucy5iYXNlVXJsO1xyXG4gICAgdGhpcy5faGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycztcclxuICB9XHJcblxyXG4gIF9jaGVja1Jlc29uc2UocmVzKXtcclxuICAgIGlmIChyZXMub2spe1xyXG4gICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICB9XHJcblxyXG4gIGdldEluaXRpYWxDYXJkcygpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSlcclxuICAgICAgLnRoZW4odGhpcy5fY2hlY2tSZXNvbnNlKTtcclxuICB9XHJcblxyXG4gIC8vIG90aGVyIG1ldGhvZHMgZm9yIHdvcmtpbmcgd2l0aCB0aGUgQVBJXHJcbiAgZ2V0VXNlckluZm8oKXtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAse1xyXG4gICAgICBtZXRob2QgOlwiR0VUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcclxuICAgIH0pXHJcbiAgICAudGhlbih0aGlzLl9jaGVja1Jlc29uc2UpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVXNlckluZm8oZGF0YSl7XHJcbiAgICBjb25zb2xlLmxvZygnVXBkYXRpbmcgdXNlciB3aXRoOicsIGRhdGEpO1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcclxuICAgIH0pXHJcbiAgICAudGhlbih0aGlzLl9jaGVja1Jlc29uc2UpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVXNlckF2YXRhcihkYXRhKXtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZS9hdmF0YXJgLHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBhdmF0YXI6IGRhdGEuYXZhdGFyXHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gICAgLnRoZW4odGhpcy5fY2hlY2tSZXNvbnNlKTtcclxuICB9XHJcblxyXG4gIGFkZE5ld0NhcmQoZGF0YSkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxyXG4gICAgICAgIGxpbms6IGRhdGEubGlua1xyXG4gICAgICB9KVxyXG4gICAgfSlcclxuICAgIC50aGVuKHRoaXMuX2NoZWNrUmVzb25zZSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVDYXJkKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfWAsIHtcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzXHJcbiAgICB9KVxyXG4gICAgLnRoZW4odGhpcy5fY2hlY2tSZXNvbnNlKTtcclxuICB9XHJcblxyXG4gIGFkZExpa2UoY2FyZElkKXtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcclxuICAgIH0pXHJcbiAgICAudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUxpa2UoY2FyZElkKXtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgLCB7XHJcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcclxuICAgIH0pXHJcbiAgICAudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIH1cclxuXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xyXG4gIGJhc2VVcmw6IFwiaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjFcIixcclxuICBoZWFkZXJzOiB7XHJcbiAgICBhdXRob3VyaXphdGlvbjogXCJCZWFyZXIgIDkxYjYwMWNjLWQ1YjItNDA1ZC1hMjFhLTYxNGU3ZThmNTdlN1wiLFxyXG4gICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcclxuICB9XHJcbn0pOyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKGRhdGEsIGNhcmRTZWxlY3RvciwgaGFuZGxlSW1hZ2VDbGljaywgaGFuZGxlRGVsZXRlU3VibWl0LCBoYW5kbGVDYXJkTGlrZSkge1xyXG4gICAgdGhpcy5faWQgPSBkYXRhLl9pZDtcclxuICAgIHRoaXMuX25hbWUgPSBkYXRhLm5hbWU7XHJcbiAgICB0aGlzLl9saW5rID0gZGF0YS5saW5rO1xyXG4gICAgdGhpcy5fbGlrZXMgPSBkYXRhLmxpa2VzIHx8IFtdO1xyXG4gICAgdGhpcy5faXNMaWtlZCA9IHRoaXMuX2xpa2VzLnNvbWUobGlrZSA9PiBsaWtlLl9pZCA9PT0gdGhpcy5fdXNlcklkKTtcclxuICAgIHRoaXMuX3VzZXJJZCA9IGRhdGEub3duZXI7XHJcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrID0gaGFuZGxlSW1hZ2VDbGljaztcclxuICAgIHRoaXMuX2hhbmRsZURlbGV0ZVN1Ym1pdCA9IGhhbmRsZURlbGV0ZVN1Ym1pdDtcclxuICAgIHRoaXMuX2hhbmRsZUNhcmRMaWtlID0gaGFuZGxlQ2FyZExpa2U7XHJcbiAgICB0aGlzLl9lbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcclxuICB9XHJcblxyXG4gIF9nZXRUZW1wbGF0ZSgpIHtcclxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fY2FyZFNlbGVjdG9yKVxyXG4gICAgICAuY29udGVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcignLmNhcmQnKVxyXG4gICAgICAuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlQ2FyZExpa2UodGhpcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9kZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZVN1Ym1pdCh0aGlzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2NhcmRJbWFnZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2soe1xyXG4gICAgICAgIG5hbWU6IHRoaXMuX25hbWUsXHJcbiAgICAgICAgbGluazogdGhpcy5fbGluayxcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGlzTGlrZWQoKXtcclxuICAgIHJldHVybiB0aGlzLl9pc2xpa2VkO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlTGlrZXModXNlcklkLCBuZXdMaWtlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkxpa2VzIGxpc3Q6IFwiLCB0aGlzLl9saWtlcywgXCJOZXcgTGlrZTogXCIsIG5ld0xpa2UpO1xyXG4gICAgaWYoIXRoaXMuX2xpa2VzLnNvbWUobGlrZSA9PiBsaWtlLl9pZCA9PT0gdGhpcy5fdXNlcklkKSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkxpa2UgQWRkZWRcIik7XHJcbiAgICAgIHRoaXMuX2xpa2VzLnB1c2goKTsgLy9BZGRzIGxpa2UgdG8gbGlzdFxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiTGlrZSBSZW1vdmVkXCIpXHJcbiAgICAgIHRoaXMuX2xpa2VzLnBvcCh7X2lkOiB1c2VySWQsIGlzTGlrZWQ6IG5ld0xpa2V9KTsgLy9SZW1vdmVzIGxpa2UgZnJvbSBsaXN0XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyhcIkxpa2VzIGxpc3Q6IFwiLCB0aGlzLl9saWtlcywgXCJsaWtlIGlkOiBcIiwgdGhpcy5fbGlrZXNbMF0uX2lkKTtcclxuICAgIHRoaXMuX2lzTGlrZWQgPSB0aGlzLl9saWtlcy5zb21lKGxpa2UgPT4gbGlrZS5faWQgPT09IHRoaXMuX3VzZXJJZCk7ICAvLyBVcGRhdGUgdGhlIGlzTGlrZWQgYm9vbGVhblxyXG4gICAgY29uc29sZS5sb2codGhpcy5faXNMaWtlZCk7XHJcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19saWtlLWNvdW50JykudGV4dENvbnRlbnQgPSB0aGlzLl9saWtlcy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICB0b2dnbGVMaWtlSWNvbigpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiVGhpcyBsaWtlIGJ1dHRvbiBpc1wiLHRoaXMuX2lzTGlrZWQpO1xyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKCdjYXJkX19saWtlLWJ1dHRvbi1hY3RpdmUnLCB0aGlzLl9pc0xpa2VkKTtcclxuICAgIGNvbnNvbGUubG9nKFwiTGlrZSBidXR0b24gdG9nZ2xlZFwiLCB0aGlzLl9pc0xpa2VkKTtcclxuICB9XHJcblxyXG4gIGdldElkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlQ2FyZCgpIHtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0VmlldygpIHtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcclxuICAgIHRoaXMuX2xpa2VCdXR0b24gPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbGVtZW50ID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2ltYWdlJyk7XHJcbiAgICB0aGlzLl9kZWxldGVCdXR0b24gPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fZGVsZXRlLWJ1dHRvbicpXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3JjJywgdGhpcy5fbGluayk7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbGVtZW50LnNldEF0dHJpYnV0ZSgnYWx0JywgdGhpcy5fbmFtZSk7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fdGl0bGUnKS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcblxyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fY2FyZEVsZW1lbnQ7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gc2V0dGluZ3MuaW5wdXRTZWxlY3RvcjtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gc2V0dGluZ3Muc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IHNldHRpbmdzLmlucHV0RXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSBzZXR0aW5ncy5lcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fZm9ybSA9IGZvcm1FbGVtZW50O1xyXG4gICAgdGhpcy5faW5wdXRFbHMgPSBbLi4udGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbCkge1xyXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlRWwgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0RWwuaWR9LWVycm9yYCk7XHJcbiAgICBpbnB1dEVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yTWVzc2FnZUVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvck1lc3NhZ2VFbC50ZXh0Q29udGVudCA9ICcnO1xyXG4gIH1cclxuXHJcbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWwpIHtcclxuICAgIGNvbnN0IGVycm9yTWVzc2FnZUVsID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsLmlkfS1lcnJvcmApO1xyXG4gICAgaW5wdXRFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvck1lc3NhZ2VFbC50ZXh0Q29udGVudCA9IGlucHV0RWwudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICBlcnJvck1lc3NhZ2VFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pbnB1dEVscy5zb21lKChpbnB1dEVsKSA9PiAhaW5wdXRFbC52YWxpZGl0eS52YWxpZCk7XHJcbiAgfVxyXG5cclxuICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcclxuICAgICAgdGhpcy5kaXNhYmxlQnV0dG9uKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9lbmFibGVCdXR0b24oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9lbmFibGVCdXR0b24oKSB7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZGlzYWJsZUJ1dHRvbigpIHtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbCkge1xyXG4gICAgaWYgKCFpbnB1dEVsLnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgdGhpcy5faW5wdXRFbHMuZm9yRWFjaCgoaW5wdXRFbCkgPT4ge1xyXG4gICAgICBpbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsKTtcclxuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKCdyZXNldCcsICgpID0+IHtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgfSwgMCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn0iLCJleHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW1xyXG4gIHtcclxuICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QveW9zZW1pdGUuanBnXCIgXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxha2UgTG91aXNleVwiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xha2UtbG91aXNlLmpwZ1wiIFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJCYWxkIE1vdW50YWluc1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2JhbGQtbW91bnRhaW5zLmpwZ1wiIFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYXRlbWFyXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGF0ZW1hci5qcGdcIiBcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvdmFub2lzZS5qcGdcIiBcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiTGFnbyBkaSBCcmFpZXNcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWdvLmpwZ1wiIFxyXG4gIH1cclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCB2YWxpZGF0aW9uU2V0dGluZ3MgPSB7XHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCJcclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwe1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ21vZGFsX29wZW5lZCcpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUVzY2FwZUNsb3NlKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsX29wZW5lZCcpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjYXBlQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUVzY2FwZUNsb3NlID0gKGV2ZW50KSA9PiB7XHJcbiAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiIHx8IGV2ZW50LmtleSA9PT0gXCJFc2NcIikge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2Nsb3NlQnV0dG9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY2xvc2UnKTtcclxuICAgIHRoaXMuX2Nsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge3RoaXMuY2xvc2UoKTt9KTtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xyXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsX29wZW5lZFwiKSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfSApXHJcbiAgfVxyXG59IiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwe1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fZm9ybScpXHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgIHRoaXMuaW5wdXRMaXN0ID0gdGhpcy5fcG9wdXBGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbF9faW5wdXQnKTtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKVxyXG4gICAgdGhpcy5fcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB0aGlzLl9nZXRJbnB1dFZhbHVlcygpO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQoaW5wdXRWYWx1ZXMpO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwRm9ybS5yZXNldCgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XHJcbiAgICBjb25zdCBmb3JtVmFsdWVzID0ge307XHJcbiAgICB0aGlzLmlucHV0TGlzdC5mb3JFYWNoKGlucHV0ID0+IHtcclxuICAgICAgZm9ybVZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlLnRyaW0oKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGZvcm1WYWx1ZXM7XHJcbiAgfVxyXG4gIHNldElucHV0VmFsdWVzKGRhdGEpIHtcclxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgdGhpcy5pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgLy8gSGVyZSB5b3UgaW5zZXJ0IHRoZSBgdmFsdWVgIGJ5IHRoZSBgbmFtZWAgb2YgdGhlIGlucHV0XHJcbiAgICAgIGlucHV0LnZhbHVlID0gZGF0YVtpbnB1dC5uYW1lXTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIiwiaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BUEkuanNcIjtcclxuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvY2FyZC5qc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvICBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xyXG5pbXBvcnQgeyB2YWxpZGF0aW9uU2V0dGluZ3MgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcbmltcG9ydCB7IFBvcHVwV2l0aEZvcm0gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCB7IFBvcHVwV2l0aEltYWdlIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IFwiLi4vcGFnZXMvaW5kZXguY3NzXCI7XHJcblxyXG4vLyBBUEkgSW5pdGlhbGl6ZWRcclxuY29uc3QgYXBpID0gbmV3IEFwaSh7XHJcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLFxyXG4gIGhlYWRlcnM6IHtcclxuICAgIGF1dGhvcml6YXRpb246IFwiOTFiNjAxY2MtZDViMi00MDVkLWEyMWEtNjE0ZTdlOGY1N2U3XCIsXHJcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxyXG4gIH1cclxufSk7XHJcblxyXG4vLyBSZW5kZXIgaW5pdGlhbCBjYXJkc1xyXG5jb25zdCBzZWN0aW9uID0gbmV3IFNlY3Rpb24oe1xyXG4gIHJlbmRlcmVyOiAoY2FyZERhdGEpID0+IHtcclxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY3JlYXRlQ2FyZChjYXJkRGF0YSk7XHJcbiAgICBzZWN0aW9uLmFkZEl0ZW1zKGNhcmRFbGVtZW50KTtcclxuICAgIH1cclxuICB9LCAnLmdhbGFyeV9fY2FyZHMnKTtcclxuICBcclxuXHJcbmNvbnN0IHVzZXIgPSBuZXcgVXNlckluZm8oXCIjbmFtZVwiLCBcIiNkZXNjcmlwdGlvblwiLCBcIiNhdmF0YXJcIik7XHJcblxyXG4vL0dldCBVc2VyIGluZm9cclxuYXBpLmdldFVzZXJJbmZvKClcclxuLnRoZW4odXNlckRhdGEgPT4ge1xyXG4gIHVzZXIuc2V0VXNlckluZm8oXHJcbiAgICB7bmFtZTogdXNlckRhdGEubmFtZSxcclxuICAgICAgYWJvdXQ6IHVzZXJEYXRhLmFib3V0LFxyXG4gICAgICBhdmF0YXI6IHVzZXJEYXRhLmF2YXRhcn0pO1xyXG59KVxyXG4uY2F0Y2goZXJyID0+IHtcclxuICBjb25zb2xlLmVycm9yKGBFcnJvciBmZXRjaGluZyB1c2VyIGluZm86ICR7ZXJyfWApO1xyXG59KTtcclxuXHJcbmFwaS5nZXRJbml0aWFsQ2FyZHMoKVxyXG4gIC50aGVuKGNhcmRzID0+IHtcclxuICAgIHNlY3Rpb24ucmVuZGVySW5pdGlhbEl0ZW1zKGNhcmRzKTtcclxuICB9KVxyXG4gIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y3RpbmcgaW5pdGlhbCBjYXJkczogJHtlcnJ9YCk7XHJcbiAgfSlcclxuXHJcblxyXG4vKiBFbGVtZW50cyAqLyBcclxuXHJcbi8vcG9wdXBzXHJcbmNvbnN0IGVkaXRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKCcjcHJvZmlsZS1lZGl0LW1vZGFsJywgaGFuZGxlUHJvZmlsZVN1Ym1pdCk7XHJcbmNvbnN0IGFkZENhcmRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKCcjYWRkLWNhcmQtbW9kYWwnLCBoYW5kbGVBZGRDYXJkU3VibWl0KTtcclxuY29uc3QgaW1hZ2VQb3B1cCA9IG5ldyBQb3B1cFdpdGhJbWFnZSgnI2ltYWdlLW1vZGFsJywgaGFuZGxlSW1hZ2VDbGljayk7IFxyXG5jb25zdCBkZWxldGVQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKCcjZGVsZXRlLW1vZGFsJywgaGFuZGxlRGVsZXRlU3VibWl0KTtcclxuY29uc3QgYXZhdGFyUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybSgnI2F2YXRhci1tb2RhbCcsIGhhbmRsZUF2YXRhclN1Ym1pdCk7XHJcblxyXG4vL2J1dHRvblxyXG5jb25zdCBwcm9maWxlRWRpdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9maWxlLWVkaXQtYnV0dG9uJyk7XHJcbmNvbnN0IGFkZE5ld0NhcmRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtYWRkLWJ1dHRvblwiKTtcclxuY29uc3QgYXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhdmF0YXItb3ZlcmxheVwiKTtcclxuXHJcbi8vcHJvZmlsZSBuYW1lICYgZGVzY3JpcHRpb24gLyB1c2VyIGluZm8gLyB1c2UgUHJvZmlsZSBpbWdcclxuY29uc3QgdXNlck5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmFtZS1pbnB1dFwiKTtcclxuY29uc3QgdXNlckpvYklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNkZXNjcmlwdGlvbi1pbnB1dFwiKTtcclxuY29uc3QgdXNlckF2YXRhcklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhdmF0YXItdXJsLWlucHV0XCIpO1xyXG5cclxuXHJcbi8vZm9ybXNcclxuY29uc3QgcHJvZmlsZUVkaXRGb3JtRWxlbWVudCA9IGRvY3VtZW50LmZvcm1zW1wicHJvZmlsZS1lZGl0LWZvcm1cIl07XHJcbmNvbnN0IHByb2ZpbGVBZGRGb3JtRWxlbWVudCA9IGRvY3VtZW50LmZvcm1zW1wiYWRkLWNhcmQtZm9ybVwiXTtcclxuY29uc3QgZGVsZXRlRm9ybUVsZW1lbnQgPSBkb2N1bWVudC5mb3Jtc1tcImRlbGV0ZS1mb3JtXCJdO1xyXG5jb25zdCBhdmF0YXJGb3JtRWxlbWVudCA9IGRvY3VtZW50LmZvcm1zW1wiYXZhdGFyLWZvcm1cIl1cclxuXHJcbi8vdmFsaWRhdG9yc1xyXG5jb25zdCBlZGl0Rm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHZhbGlkYXRpb25TZXR0aW5ncywgcHJvZmlsZUVkaXRGb3JtRWxlbWVudCk7XHJcbmNvbnN0IGFkZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uU2V0dGluZ3MsIHByb2ZpbGVBZGRGb3JtRWxlbWVudCk7XHJcbmNvbnN0IGRlbGV0ZUZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uU2V0dGluZ3MsIGRlbGV0ZUZvcm1FbGVtZW50KTtcclxuY29uc3QgYXZhdGFyRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHZhbGlkYXRpb25TZXR0aW5ncywgYXZhdGFyRm9ybUVsZW1lbnQpO1xyXG5cclxuLy9Gb3JtIFZhbGlkYXRvcnNcclxuZWRpdEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5hZGRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuZGVsZXRlRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbmF2YXRhckZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuXHJcblxyXG4vKiBGdW5jdGlvbnMqL1xyXG4vL0NyZWF0ZSBDYXJkXHJcbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoaXRlbSkge1xyXG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gbmV3IENhcmQoaXRlbSwgJyNjYXJkLXRlbXBsYXRlJywgaGFuZGxlSW1hZ2VDbGljaywgaGFuZGxlRGVsZXRlU3VibWl0LCBoYW5kbGVDYXJkTGlrZSk7XHJcbiAgcmV0dXJuIGNhcmRFbGVtZW50LmdldFZpZXcoKTtcclxufVxyXG4vKkV2ZW50IEhhbmRsZXJzKi9cclxuLy9pbWFnZSBjbGlja1xyXG5mdW5jdGlvbiBoYW5kbGVJbWFnZUNsaWNrKGNhcmREYXRhKSB7XHJcbiAgICBpbWFnZVBvcHVwLm9wZW4oY2FyZERhdGEpO1xyXG59XHJcblxyXG4vL2VkaXQgcHJvZmlsZVxyXG5mdW5jdGlvbiBoYW5kbGVQcm9maWxlU3VibWl0KGRhdGEpIHtcclxuICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICBhcGkudXBkYXRlVXNlckluZm8oe1xyXG4gICAgbmFtZTogZGF0YS5uYW1lLFxyXG4gICAgYWJvdXQ6IGRhdGEuYWJvdXRcclxuICB9KVxyXG4gICAgLnRoZW4odXBkYXRlZFVzZXJEYXRhID0+IHtcclxuICAgICAgdXNlci5zZXRVc2VySW5mbyh7XHJcbiAgICAgICAgbmFtZTogdXBkYXRlZFVzZXJEYXRhLm5hbWUsIFxyXG4gICAgICAgIGFib3V0OiB1cGRhdGVkVXNlckRhdGEuYWJvdXQgfHwgdXBkYXRlZFVzZXJEYXRhLmRhc2NyaXB0aW9uIHx8IHVwZGF0ZWRVc2VyRGF0YS5iaW9cclxuICAgICAgfSk7XHJcbiAgICAgIGVkaXRQb3B1cC5jbG9zZSgpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihgRXJyb3IgdXBkYXRpbmcgcHJvZmlsZTogJHtlcnJ9YCkpO1xyXG4gICB9XHJcblxyXG4vLyBBZGQgY2FyZFxyXG5mdW5jdGlvbiBoYW5kbGVBZGRDYXJkU3VibWl0KGRhdGEpIHtcclxuICBjb25zdCBjYXJkRGF0YSA9IHtcclxuICAgIG5hbWU6IGRhdGEudGl0bGUsXHJcbiAgICBsaW5rOiBkYXRhLnVybFxyXG4gIH07XHJcblxyXG4gIC8vIENyZWF0ZSB0aGUgQ2FyZCBcclxuICBhcGkuYWRkTmV3Q2FyZChjYXJkRGF0YSlcclxuICAgIC50aGVuKChuZXdDYXJkRGF0YSkgPT4ge1xyXG4gICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGNyZWF0ZUNhcmQobmV3Q2FyZERhdGEpO1xyXG4gICAgICBzZWN0aW9uLmFkZEl0ZW1zKGNhcmRFbGVtZW50KTsgIFxyXG4gICAgICBhZGRDYXJkUG9wdXAuY2xvc2UoKTsgICAgICAgICAgICBcclxuICAgICAgcHJvZmlsZUFkZEZvcm1FbGVtZW50LnJlc2V0KCk7ICBcclxuICAgICAgYWRkRm9ybVZhbGlkYXRvci5kaXNhYmxlQnV0dG9uKCk7ICBcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgYWRkaW5nIGNhcmQ6ICR7ZXJyfWApO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vYXZhdGFyXHJcbmZ1bmN0aW9uIGhhbmRsZUF2YXRhclN1Ym1pdChkYXRhKXtcclxuICBhcGkudXBkYXRlVXNlckF2YXRhcih7XHJcbiAgICBhdmF0YXI6IGRhdGEudXJsXHJcbiAgfSlcclxuICAgIC50aGVuKHVwZGF0ZVVzZXJEYXRhID0+IHtcclxuICAgICAgdXNlci5zZXRVc2VySW5mbyh7XHJcbiAgICAgICAgYXZhdGFyOiB1cGRhdGVVc2VyRGF0YS5hdmF0YXJcclxuICAgICAgfSk7XHJcbiAgICAgIGF2YXRhclBvcHVwLmNsb3NlKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGBFcnJvciB1cGRhdGluZyBhdmF0YXI6ICR7ZXJyfWApKTtcclxufVxyXG5cclxuLy9kZWxldGVcclxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlU3VibWl0KGNhcmQpe1xyXG4gIGlmKGNhcmQpe2NvbnN0IGNvbmZpcm1CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGVsZXRlLWNvbmZpcm0tYnV0dG9uJyk7XHJcbiAgZGVsZXRlUG9wdXAub3BlbigpO1xyXG4gIGNvbmZpcm1CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiBvbkNvbmZpcm1DbGljaygpIHtcclxuICAgIGNhcmQucmVtb3ZlQ2FyZCgpO1xyXG4gICAgYXBpLmRlbGV0ZUNhcmQoY2FyZC5faWQpO1xyXG4gICAgZGVsZXRlUG9wdXAuY2xvc2UoKTtcclxuICAgIGNvbmZpcm1CdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNvbmZpcm1DbGljaylcclxuICB9KX1cclxuICBcclxufVxyXG5cclxuLy9saWtlXHJcbmZ1bmN0aW9uIGhhbmRsZUNhcmRMaWtlKGNhcmQpe1xyXG4gIGNvbnNvbGUubG9nKGNhcmQpO1xyXG4gIGNvbnN0IGlzTGlrZWQgPSBjYXJkLmlzTGlrZWQoKTsgXHJcblxyXG4gIGNvbnN0IGxpa2VQcm9taXNlID0gaXNMaWtlZFxyXG4gICAgPyBhcGkucmVtb3ZlTGlrZShjYXJkLmdldElkKCkpICBcclxuICAgIDogYXBpLmFkZExpa2UoY2FyZC5nZXRJZCgpKTsgXHJcblxyXG4gIGxpa2VQcm9taXNlXHJcbiAgICAudGhlbihyZXNwb25zZSA9PiAgcmVzcG9uc2UuanNvbigpKVxyXG4gICAgLnRoZW4odXBkYXRlZENhcmREYXRhID0+IHtcclxuICAgICAgY29uc29sZS5sb2coXCJUSGlzIGlzIHRoZSB1cGRhdGVkIENhcmREYXRhOiBcIiwgdXBkYXRlZENhcmREYXRhKTtcclxuICAgICAgY2FyZC51cGRhdGVMaWtlcyhjYXJkLm93bmVyICwgdXBkYXRlZENhcmREYXRhLmlzTGlrZWQpOyBcclxuICAgICAgY2FyZC50b2dnbGVMaWtlSWNvbigpOyBcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoYEVycm9yIHVwZGF0aW5nIGxpa2Ugc3RhdHVzOiAke2Vycn1gKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9wZW5Qcm9maWxlTW9kYWwocG9wdXApIHtcclxuICBjb25zdCBjdXJyZW50VXNlciA9IHVzZXIuZ2V0VXNlckluZm8oKTtcclxuICB1c2VyTmFtZUlucHV0LnZhbHVlID0gY3VycmVudFVzZXIubmFtZTtcclxuICB1c2VySm9iSW5wdXQudmFsdWUgPSBjdXJyZW50VXNlci5hYm91dDtcclxuICB1c2VyQXZhdGFySW5wdXQudmFsdWUgPSBjdXJyZW50VXNlci5hdmF0YXI7XHJcbiAgcG9wdXAub3BlbigpO1xyXG59XHJcblxyXG4vLyBFdmVudCBMaXN0ZW5lcnNcclxuYXZhdGFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT57b3BlblByb2ZpbGVNb2RhbChhdmF0YXJQb3B1cCl9KVxyXG5cclxucHJvZmlsZUVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PntvcGVuUHJvZmlsZU1vZGFsKGVkaXRQb3B1cCl9KTtcclxuXHJcbmFkZE5ld0NhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgYWRkQ2FyZFBvcHVwLm9wZW4oKTtcclxufSk7XHJcblxyXG5cclxuXHJcbmVkaXRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5hZGRDYXJkUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuaW1hZ2VQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5kZWxldGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5hdmF0YXJQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7cmVuZGVyZXJ9LCBjb250YWluZXJTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICB0aGlzLl9kYXRhLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xyXG4gIH0pO1xyXG59XHJcblxyXG4gIGFkZEl0ZW1zKGVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJJdGVtcygpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5pbm5lckhUTUwgPSAnJzsgXHJcbiAgfVxyXG5cclxuICByZW5kZXJJbml0aWFsSXRlbXMoaXRlbXMpIHtcclxuICAgIHRoaXMuY2xlYXJJdGVtcygpOyBcclxuICAgIGl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm97XHJcbiAgY29uc3RydWN0b3IobmFtZVNlbGN0b3IsIGpvYlNlbGVjdG9yLCBhdmF0YXJTZWxlY3Rvcil7XHJcbiAgICB0aGlzLl9uYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZVNlbGN0b3IpO1xyXG4gICAgdGhpcy5fam9iRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioam9iU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fYXZhdGFyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYXZhdGFyU2VsZWN0b3IpXHJcbiAgICBcclxuICB9XHJcbiAgZ2V0VXNlckluZm8oKXtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IHRoaXMuX25hbWVFbGVtZW50LnRleHRDb250ZW50LCBcclxuICAgICAgYWJvdXQ6IHRoaXMuX2pvYkVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICAgIGF2YXRhcjogdGhpcy5fYXZhdGFyRWxlbWVudC5zcmN9OyAgICBcclxuICB9XHJcbiAgc2V0VXNlckluZm8oZGF0YSl7XHJcbiAgICBpZiAoZGF0YS5uYW1lKSB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IGRhdGEubmFtZTtcclxuICAgIGlmKGRhdGEuYWJvdXQpIHRoaXMuX2pvYkVsZW1lbnQudGV4dENvbnRlbnQgPSBkYXRhLmFib3V0O1xyXG4gICAgaWYoZGF0YS5hdmF0YXIpIHRoaXMuX2F2YXRhckVsZW1lbnQuc3JjID0gZGF0YS5hdmF0YXI7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgZGF0YSkge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9wb3B1cEltYWdlID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9faW1hZ2UnKTtcclxuICAgIHRoaXMuX3BvcHVwVGl0bGUgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19jYXJkLXRpdGxlJyk7XHJcbiAgICBcclxuICAgIFxyXG5cclxuICB9XHJcbiAgb3BlbihkYXRhKXtcclxuICAgLy8gc2V0IHRoZSBpbWFnZSdzIHNyYyBhbmQgYWx0XHJcbiAgICB0aGlzLl9wb3B1cEltYWdlLnNyYyA9IGRhdGEubGluaztcclxuICAgIHRoaXMuX3BvcHVwSW1hZ2UuYWx0ID0gZGF0YS5uYW1lO1xyXG4gICAvLyBzZXQgdGhlIGNhcHRpb24ncyB0ZXh0Q29udGVudFxyXG4gICAgdGhpcy5fcG9wdXBUaXRsZS50ZXh0Q29udGVudCA9IGRhdGEubmFtZTtcclxuICAgIHN1cGVyLm9wZW4oKTtcclxuICB9XHJcbn0iXSwibmFtZXMiOlsiQXBpIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwidGhpcyIsIl9iYXNlVXJsIiwiYmFzZVVybCIsIl9oZWFkZXJzIiwiaGVhZGVycyIsIl9jaGVja1Jlc29uc2UiLCJyZXMiLCJvayIsImpzb24iLCJQcm9taXNlIiwicmVqZWN0Iiwic3RhdHVzIiwiZ2V0SW5pdGlhbENhcmRzIiwiZmV0Y2giLCJtZXRob2QiLCJ0aGVuIiwiZ2V0VXNlckluZm8iLCJ1cGRhdGVVc2VySW5mbyIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1cGRhdGVVc2VyQXZhdGFyIiwiYXZhdGFyIiwiYWRkTmV3Q2FyZCIsIm5hbWUiLCJsaW5rIiwiZGVsZXRlQ2FyZCIsImNhcmRJZCIsImFkZExpa2UiLCJfY2hlY2tSZXNwb25zZSIsInJlbW92ZUxpa2UiLCJhdXRob3VyaXphdGlvbiIsIkNhcmQiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVJbWFnZUNsaWNrIiwiaGFuZGxlRGVsZXRlU3VibWl0IiwiaGFuZGxlQ2FyZExpa2UiLCJfaWQiLCJfbmFtZSIsIl9saW5rIiwiX2xpa2VzIiwibGlrZXMiLCJfaXNMaWtlZCIsInNvbWUiLCJsaWtlIiwiX3VzZXJJZCIsIm93bmVyIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVJbWFnZUNsaWNrIiwiX2hhbmRsZURlbGV0ZVN1Ym1pdCIsIl9oYW5kbGVDYXJkTGlrZSIsIl9lbGVtZW50IiwiX2dldFRlbXBsYXRlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsIl9zZXRFdmVudExpc3RlbmVycyIsIl9saWtlQnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9kZWxldGVCdXR0b24iLCJfY2FyZEltYWdlRWxlbWVudCIsImlzTGlrZWQiLCJfaXNsaWtlZCIsInVwZGF0ZUxpa2VzIiwidXNlcklkIiwibmV3TGlrZSIsInBvcCIsInB1c2giLCJ0ZXh0Q29udGVudCIsImxlbmd0aCIsInRvZ2dsZUxpa2VJY29uIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiZ2V0SWQiLCJyZW1vdmVDYXJkIiwiX2NhcmRFbGVtZW50IiwicmVtb3ZlIiwiZ2V0VmlldyIsInNldEF0dHJpYnV0ZSIsIkZvcm1WYWxpZGF0b3IiLCJzZXR0aW5ncyIsImZvcm1FbGVtZW50IiwiX2lucHV0U2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiX2Zvcm0iLCJfaW5wdXRFbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX3N1Ym1pdEJ1dHRvbiIsIl9oaWRlSW5wdXRFcnJvciIsImlucHV0RWwiLCJlcnJvck1lc3NhZ2VFbCIsImlkIiwiX3Nob3dJbnB1dEVycm9yIiwiYWRkIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfaGFzSW52YWxpZElucHV0IiwidmFsaWRpdHkiLCJ2YWxpZCIsIl90b2dnbGVCdXR0b25TdGF0ZSIsImRpc2FibGVCdXR0b24iLCJfZW5hYmxlQnV0dG9uIiwiZGlzYWJsZWQiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwiZm9yRWFjaCIsInNldFRpbWVvdXQiLCJlbmFibGVWYWxpZGF0aW9uIiwiZSIsInByZXZlbnREZWZhdWx0IiwidmFsaWRhdGlvblNldHRpbmdzIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwRWxlbWVudCIsIm9wZW4iLCJfaGFuZGxlRXNjYXBlQ2xvc2UiLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldmVudCIsImtleSIsInNldEV2ZW50TGlzdGVuZXJzIiwiX2Nsb3NlQnV0dG9uIiwidGFyZ2V0IiwiY29udGFpbnMiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX3BvcHVwRm9ybSIsIl9oYW5kbGVGb3JtU3VibWl0IiwiaW5wdXRMaXN0IiwiaW5wdXRWYWx1ZXMiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJyZXNldCIsImZvcm1WYWx1ZXMiLCJpbnB1dCIsInZhbHVlIiwidHJpbSIsInNldElucHV0VmFsdWVzIiwiYXBpIiwiYXV0aG9yaXphdGlvbiIsInNlY3Rpb24iLCJfcmVmIiwiY29udGFpbmVyU2VsZWN0b3IiLCJyZW5kZXJlciIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJyZW5kZXJJdGVtcyIsIl9kYXRhIiwiaXRlbSIsImFkZEl0ZW1zIiwiZWxlbWVudCIsInByZXBlbmQiLCJjbGVhckl0ZW1zIiwiaW5uZXJIVE1MIiwicmVuZGVySW5pdGlhbEl0ZW1zIiwiaXRlbXMiLCJjYXJkRGF0YSIsImNhcmRFbGVtZW50IiwiY3JlYXRlQ2FyZCIsInVzZXIiLCJuYW1lU2VsY3RvciIsImpvYlNlbGVjdG9yIiwiYXZhdGFyU2VsZWN0b3IiLCJfbmFtZUVsZW1lbnQiLCJfam9iRWxlbWVudCIsIl9hdmF0YXJFbGVtZW50IiwiYWJvdXQiLCJzcmMiLCJzZXRVc2VySW5mbyIsInVzZXJEYXRhIiwiY2F0Y2giLCJlcnIiLCJlcnJvciIsImNhcmRzIiwiZWRpdFBvcHVwIiwidXBkYXRlZFVzZXJEYXRhIiwiZGFzY3JpcHRpb24iLCJiaW8iLCJhZGRDYXJkUG9wdXAiLCJ0aXRsZSIsInVybCIsIm5ld0NhcmREYXRhIiwicHJvZmlsZUFkZEZvcm1FbGVtZW50IiwiYWRkRm9ybVZhbGlkYXRvciIsImltYWdlUG9wdXAiLCJfcG9wdXBJbWFnZSIsIl9wb3B1cFRpdGxlIiwiYWx0IiwiZGVsZXRlUG9wdXAiLCJhdmF0YXJQb3B1cCIsInVwZGF0ZVVzZXJEYXRhIiwicHJvZmlsZUVkaXRCdXR0b24iLCJhZGROZXdDYXJkQnV0dG9uIiwidXNlck5hbWVJbnB1dCIsInVzZXJKb2JJbnB1dCIsInVzZXJBdmF0YXJJbnB1dCIsInByb2ZpbGVFZGl0Rm9ybUVsZW1lbnQiLCJmb3JtcyIsImRlbGV0ZUZvcm1FbGVtZW50IiwiYXZhdGFyRm9ybUVsZW1lbnQiLCJlZGl0Rm9ybVZhbGlkYXRvciIsImRlbGV0ZUZvcm1WYWxpZGF0b3IiLCJhdmF0YXJGb3JtVmFsaWRhdG9yIiwiY2FyZCIsImNvbmZpcm1CdXR0b24iLCJvbkNvbmZpcm1DbGljayIsInJlc3BvbnNlIiwidXBkYXRlZENhcmREYXRhIiwib3BlblByb2ZpbGVNb2RhbCIsInBvcHVwIiwiY3VycmVudFVzZXIiXSwic291cmNlUm9vdCI6IiJ9