!function(){"use strict";class e{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers})}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers})}updateUserInfo(e){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)})}updateUserAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})})}addNewCard(e){return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}addLike(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers})}removeLike(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}}new e({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authourization:"Bearer  91b601cc-d5b2-405d-a21a-614e7e8f57e7","Content-Type":"application/json"}});class t{constructor(e,t,s,r,n){this._id=e._id,this._name=e.name,this._link=e.link,this._isLiked=e.isLiked,this._userId=e.owner,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteSubmit=r,this._handleCardLike=n,this._element=this._getTemplate()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleCardLike(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteSubmit(this)})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}isLiked(){return this._isLiked}updateLikes(e){this._isLiked=e,this.toggleLikeIcon()}toggleLikeIcon(){this._likeButton.classList.toggle("card__like-button-active",this._isLiked)}getId(){return this._id}removeCard(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardImageElement.setAttribute("src",this._link),this._cardImageElement.setAttribute("alt",this._name),this._cardElement.querySelector(".card__title").textContent=this._name,this.toggleLikeIcon(),this._setEventListeners(),this._cardElement}}class s{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_setEventListeners(){this._toggleButtonState(),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._form.addEventListener("reset",(()=>{setTimeout((()=>{this._toggleButtonState()}),0)}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}const r={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};class n{constructor(e){this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscapeClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscapeClose)}_handleEscapeClose=e=>{"Escape"!==e.key&&"Esc"!==e.key||this.close()};setEventListeners(){this._closeButton=this._popupElement.querySelector(".modal__close"),this._closeButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}class i extends n{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this.inputList=this._popupForm.querySelectorAll(".modal__input"),this.submitButton=this._popupForm.querySelector(".modal__button")}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)}))}_getInputValues(){const e={};return this.inputList.forEach((t=>{e[t.name]=t.value.trim()})),e}setInputValues(e){console.log(e),this.inputList.forEach((t=>{t.value=e[t.name]}))}}const a=new e({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"91b601cc-d5b2-405d-a21a-614e7e8f57e7","Content-Type":"application/json"}}),o=new class{constructor(e,t){let{data:s,renderer:r}=e;this._data=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItems(e){this._container.prepend(e)}}({renderer:e=>{const t=B(e);o.addItems(t)}},".galary__cards"),l=new class{constructor(e,t,s){this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,about:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){e.name&&(this._nameElement.textContent=e.name),e.about&&(this._jobElement.textContent=e.about),e.avatar&&(this._avatarElement.src=e.avatar)}}("#name","#description","#avatar");a.getUserInfo().then((e=>{l.setUserInfo({name:e.name,about:e.about,avatar:e.avatar})})).catch((e=>{console.error(`Error fetching user info: ${e}`)})),a.getInitialCards().then((e=>{o.renderItems(e)})).catch((e=>{console.error(`Error fetcting cards: ${e}`)}));const d=new i("#profile-edit-modal",(function(e){x(!0,d),a.updateUserInfo({name:e.name,about:e.about}).then((e=>{l.setUserInfo({name:e.name,about:e.about||e.dascription||e.bio})})).catch((e=>console.error(`Error updating profile: ${e}`))).finally((()=>{x(!1,d),d.close()}))})),u=new i("#add-card-modal",(function(e){const t={name:e.title,link:e.url};x(!0,u),a.addNewCard(t).then((e=>{const t=B(e);o.addItems(t),u.close(),L.reset(),S.disableButton()})).catch((e=>{console.error(`Error adding card: ${e}`)})).finally((()=>{x(!1,u)}))})),c=new class extends n{constructor(e,t){super(e),this._popupImage=this._popupElement.querySelector(".modal__image"),this._popupTitle=this._popupElement.querySelector(".modal__card-title")}open(e){this._popupImage.src=e.link,this._popupImage.alt=e.name,this._popupTitle.textContent=e.name,super.open()}}("#image-modal",q),h=new class extends n{constructor(e){super(e),this._confirmButton=this._popupElement.querySelector(".modal__button")}setSubmitFunction(e){this._handleConfirm=e}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",(()=>{this._handleConfirm()}))}}("#delete-modal"),_=new i("#avatar-modal",(function(e){x(!0,_),a.updateUserAvatar({avatar:e.url}).then((e=>{l.setUserInfo({avatar:e.avatar})})).catch((e=>console.error(`Error updating avatar: ${e}`))).finally((()=>{x(!1,_),_.close(),k.reset()}))})),m=document.querySelector("#profile-edit-button"),p=document.querySelector("#profile-add-button"),E=document.querySelector("#avatar-overlay"),v=document.querySelector("#name-input"),b=document.querySelector("#description-input"),f=document.forms["profile-edit-form"],L=document.forms["add-card-form"],g=document.forms["delete-form"],k=document.forms["avatar-form"],C=new s(r,f),S=new s(r,L),y=new s(r,g),I=new s(r,k);function B(e){return new t(e,"#card-template",q,U,w).getView()}function q(e){c.open(e)}function U(e){x(!0,h),h.setSubmitFunction((()=>{a.deleteCard(e._id).then((e=>{e.removeCard()})).catch((e=>{console.error(`Error deleting card ${e}`)})).finally((()=>{x(!1,h),h.close()}))})),h.open()}function w(e){(e.isLiked()?a.removeLike(e.getId()):a.addLike(e.getId())).then((t=>{e.updateLikes(t.isLiked)})).catch((e=>console.error(`Error updating like status: ${e}`)))}function $(e){const t=l.getUserInfo();v.value=t.name,b.value=t.about,e.open()}function x(e,t){if(e){if(t==h)return t.confirmButton.textContent="Deleating Card";if(t==u)return t.submitButton.textContent="Creating Card";if(t==d||_)return t.submitButton.textContent="Saving"}else{if(t==h)return t.confirmButton.textContent="Yes";if(t==u)return t.submitButton.textContent="Create";if(t==d||_)return t.submitButton.textContent="Save"}}C.enableValidation(),S.enableValidation(),y.enableValidation(),I.enableValidation(),E.addEventListener("click",(()=>{$(_)})),m.addEventListener("click",(()=>{$(d)})),p.addEventListener("click",(()=>{u.open()})),d.setEventListeners(),u.setEventListeners(),c.setEventListeners(),h.setEventListeners(),_.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YyxRQUk1QyxLQUNJLENBQ0YsR0FBRzBJLEdBQVNyQixFQUNWLE9BQU9xQixFQUFNRyxjQUFjN0ksWUFBYyxNQUUzQyxHQUFHMEksR0FBUy9CLEVBQ1YsT0FBTytCLEVBQU0vRSxhQUFhM0QsWUFBYyxTQUUxQyxHQUFHMEksR0FBU3JDLEdBQWFxQixFQUN2QixPQUFPZ0IsRUFBTS9FLGFBQWEzRCxZQUFjLE1BRTlDLENBQUMsQ0E1SkRvSSxFQUFrQmhHLG1CQUNsQjRFLEVBQWlCNUUsbUJBQ2pCaUcsRUFBb0JqRyxtQkFDcEJrRyxFQUFvQmxHLG1CQTRKcEJuRixFQUFPaUMsaUJBQWlCLFNBQVMsS0FBTXVKLEVBQVVmLEVBQVksSUFFN0RHLEVBQWtCM0ksaUJBQWlCLFNBQVMsS0FBTXVKLEVBQVVwQyxFQUFVLElBRXRFeUIsRUFBaUI1SSxpQkFBaUIsU0FBUyxLQUN6Q3lILEVBQWFoRSxNQUFNLElBS3JCMEQsRUFBVXBELG9CQUNWMEQsRUFBYTFELG9CQUNiZ0UsRUFBV2hFLG9CQUNYb0UsRUFBWXBFLG9CQUNaeUUsRUFBWXpFLG1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvQVBJLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL2NhcmQuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybWF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XHJcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgdGhpcy5fYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVybDtcclxuICAgIHRoaXMuX2hlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnM7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tSZXNwb25zZShyZXMpe1xyXG4gICAgaWYgKHJlcy5vayl7XHJcbiAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gIH1cclxuXHJcbiAgX3JlcXVlc3QodXJsLCBvcHRpb25zKXtcclxuICAgIHJldHVybiBmZXRjaCh1cmwsIG9wdGlvbnMpLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICBnZXRJbml0aWFsQ2FyZHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBvdGhlciBtZXRob2RzIGZvciB3b3JraW5nIHdpdGggdGhlIEFQSVxyXG4gIGdldFVzZXJJbmZvKCl7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAse1xyXG4gICAgICBtZXRob2QgOlwiR0VUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVXNlckluZm8oZGF0YSl7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVVzZXJBdmF0YXIoZGF0YSl7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZS9hdmF0YXJgLHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBhdmF0YXI6IGRhdGEuYXZhdGFyXHJcbiAgICAgIH0pXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFkZE5ld0NhcmQoZGF0YSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXHJcbiAgICAgICAgbGluazogZGF0YS5saW5rXHJcbiAgICAgIH0pXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUNhcmQoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhZGRMaWtlKGNhcmRJZCl7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlTGlrZShjYXJkSWQpe1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xyXG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgfVxyXG5cclxuY29uc3QgYXBpID0gbmV3IEFwaSh7XHJcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLFxyXG4gIGhlYWRlcnM6IHtcclxuICAgIGF1dGhvdXJpemF0aW9uOiBcIkJlYXJlciAgOTFiNjAxY2MtZDViMi00MDVkLWEyMWEtNjE0ZTdlOGY1N2U3XCIsXHJcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxyXG4gIH1cclxufSk7IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XHJcbiAgY29uc3RydWN0b3IoZGF0YSwgY2FyZFNlbGVjdG9yLCBoYW5kbGVJbWFnZUNsaWNrLCBoYW5kbGVEZWxldGVTdWJtaXQsIGhhbmRsZUNhcmRMaWtlKSB7XHJcbiAgICB0aGlzLl9pZCA9IGRhdGEuX2lkO1xyXG4gICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9pc0xpa2VkID0gZGF0YS5pc0xpa2VkO1xyXG4gICAgdGhpcy5fdXNlcklkID0gZGF0YS5vd25lcjtcclxuICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcclxuICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2sgPSBoYW5kbGVJbWFnZUNsaWNrO1xyXG4gICAgdGhpcy5faGFuZGxlRGVsZXRlU3VibWl0ID0gaGFuZGxlRGVsZXRlU3VibWl0O1xyXG4gICAgdGhpcy5faGFuZGxlQ2FyZExpa2UgPSBoYW5kbGVDYXJkTGlrZTtcclxuICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgX2dldFRlbXBsYXRlKCkge1xyXG4gICAgY29uc3QgY2FyZEVsZW1lbnQgPSBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXHJcbiAgICAgIC5jb250ZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKCcuY2FyZCcpXHJcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICByZXR1cm4gY2FyZEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVDYXJkTGlrZSh0aGlzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlRGVsZXRlU3VibWl0KHRoaXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fY2FyZEltYWdlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayh7XHJcbiAgICAgICAgbmFtZTogdGhpcy5fbmFtZSxcclxuICAgICAgICBsaW5rOiB0aGlzLl9saW5rLFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaXNMaWtlZCgpe1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzTGlrZWQ7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVMaWtlcyh1cGRhdGVkTGlrZSkgeyBcclxuICAgIHRoaXMuX2lzTGlrZWQgPSB1cGRhdGVkTGlrZTsgLy91cGRhdGVzIGlzTGlrZWQgQm9vbGVhblxyXG4gICAgdGhpcy50b2dnbGVMaWtlSWNvbigpO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlTGlrZUljb24oKSB7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoJ2NhcmRfX2xpa2UtYnV0dG9uLWFjdGl2ZScsIHRoaXMuX2lzTGlrZWQpO1xyXG4gICAgXHJcbiAgfVxyXG5cclxuICBnZXRJZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pZDtcclxuICB9XHJcblxyXG4gIHJlbW92ZUNhcmQoKSB7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldFZpZXcoKSB7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKVxyXG4gICAgdGhpcy5fY2FyZEltYWdlRWxlbWVudCA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19pbWFnZScpO1xyXG4gICAgdGhpcy5fZGVsZXRlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2RlbGV0ZS1idXR0b24nKVxyXG4gICAgdGhpcy5fY2FyZEltYWdlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NyYycsIHRoaXMuX2xpbmspO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FsdCcsIHRoaXMuX25hbWUpO1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX3RpdGxlJykudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG4gICAgdGhpcy50b2dnbGVMaWtlSWNvbigpOyAvL1Nob3dzIHRoZSB1c2VyIGlmIGl0IGFscmVhZHkgbGlrZWRcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBmb3JtRWxlbWVudCkge1xyXG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IHNldHRpbmdzLmlucHV0U2VsZWN0b3I7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IHNldHRpbmdzLnN1Ym1pdEJ1dHRvblNlbGVjdG9yO1xyXG4gICAgdGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyA9IHNldHRpbmdzLmluYWN0aXZlQnV0dG9uQ2xhc3M7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBzZXR0aW5ncy5pbnB1dEVycm9yQ2xhc3M7XHJcbiAgICB0aGlzLl9lcnJvckNsYXNzID0gc2V0dGluZ3MuZXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Zvcm0gPSBmb3JtRWxlbWVudDtcclxuICAgIHRoaXMuX2lucHV0RWxzID0gWy4uLnRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dFNlbGVjdG9yKV07XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWwpIHtcclxuICAgIGNvbnN0IGVycm9yTWVzc2FnZUVsID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsLmlkfS1lcnJvcmApO1xyXG4gICAgaW5wdXRFbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvck1lc3NhZ2VFbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JNZXNzYWdlRWwudGV4dENvbnRlbnQgPSAnJztcclxuICB9XHJcblxyXG4gIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsKSB7XHJcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VFbCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihgIyR7aW5wdXRFbC5pZH0tZXJyb3JgKTtcclxuICAgIGlucHV0RWwuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JNZXNzYWdlRWwudGV4dENvbnRlbnQgPSBpbnB1dEVsLnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgZXJyb3JNZXNzYWdlRWwuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcclxuICB9XHJcblxyXG4gIF9oYXNJbnZhbGlkSW5wdXQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5faW5wdXRFbHMuc29tZSgoaW5wdXRFbCkgPT4gIWlucHV0RWwudmFsaWRpdHkudmFsaWQpO1xyXG4gIH1cclxuXHJcbiAgX3RvZ2dsZUJ1dHRvblN0YXRlKCkge1xyXG4gICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCgpKSB7XHJcbiAgICAgIHRoaXMuZGlzYWJsZUJ1dHRvbigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fZW5hYmxlQnV0dG9uKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfZW5hYmxlQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGRpc2FibGVCdXR0b24oKSB7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWwpIHtcclxuICAgIGlmICghaW5wdXRFbC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgIHRoaXMuX2lucHV0RWxzLmZvckVhY2goKGlucHV0RWwpID0+IHtcclxuICAgICAgaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbCk7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcigncmVzZXQnLCAoKSA9PiB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgIH0sIDApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xyXG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGNvbnN0IGluaXRpYWxDYXJkcyA9IFtcclxuICB7XHJcbiAgICBuYW1lOiBcIllvc2VtaXRlIFZhbGxleVwiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3lvc2VtaXRlLmpwZ1wiIFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYWtlIExvdWlzZXlcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWtlLWxvdWlzZS5qcGdcIiBcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiQmFsZCBNb3VudGFpbnNcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9iYWxkLW1vdW50YWlucy5qcGdcIiBcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiTGF0ZW1hclwiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhdGVtYXIuanBnXCIgXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIlZhbm9pc2UgTmF0aW9uYWwgUGFya1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3Zhbm9pc2UuanBnXCIgXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxhZ28gZGkgQnJhaWVzXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFnby5qcGdcIiBcclxuICB9XHJcbl07XHJcblxyXG5leHBvcnQgY29uc3QgdmFsaWRhdGlvblNldHRpbmdzID0ge1xyXG4gIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fYnV0dG9uXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fYnV0dG9uX2Rpc2FibGVkXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dF90eXBlX2Vycm9yXCIsXHJcbiAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfdmlzaWJsZVwiXHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgb3BlbigpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdtb2RhbF9vcGVuZWQnKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NhcGVDbG9zZSk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdtb2RhbF9vcGVuZWQnKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY2FwZUNsb3NlKTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVFc2NhcGVDbG9zZSA9IChldmVudCkgPT4ge1xyXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gXCJFc2NhcGVcIiB8fCBldmVudC5rZXkgPT09IFwiRXNjXCIpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9jbG9zZUJ1dHRvbiA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Nsb3NlJyk7XHJcbiAgICB0aGlzLl9jbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHt0aGlzLmNsb3NlKCk7fSk7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9vcGVuZWRcIikpIHtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgIH1cclxuICAgIH0gKVxyXG4gIH1cclxufSIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0KSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2Zvcm0nKVxyXG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XHJcbiAgICB0aGlzLmlucHV0TGlzdCA9IHRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcubW9kYWxfX2lucHV0Jyk7XHJcbiAgICB0aGlzLnN1Ym1pdEJ1dHRvbiA9IHRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2J1dHRvbicpO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpXHJcbiAgICB0aGlzLl9wb3B1cEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBjb25zdCBpbnB1dFZhbHVlcyA9IHRoaXMuX2dldElucHV0VmFsdWVzKCk7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdChpbnB1dFZhbHVlcyk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIGNvbnN0IGZvcm1WYWx1ZXMgPSB7fTtcclxuICAgIHRoaXMuaW5wdXRMaXN0LmZvckVhY2goaW5wdXQgPT4ge1xyXG4gICAgICBmb3JtVmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWUudHJpbSgpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZm9ybVZhbHVlcztcclxuICB9XHJcbiAgc2V0SW5wdXRWYWx1ZXMoZGF0YSkge1xyXG4gICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICB0aGlzLmlucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICAvLyBIZXJlIHlvdSBpbnNlcnQgdGhlIGB2YWx1ZWAgYnkgdGhlIGBuYW1lYCBvZiB0aGUgaW5wdXRcclxuICAgICAgaW5wdXQudmFsdWUgPSBkYXRhW2lucHV0Lm5hbWVdO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQVBJLmpzXCI7XHJcbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL2NhcmQuanNcIjtcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCBVc2VySW5mbyAgZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcclxuaW1wb3J0IHsgdmFsaWRhdGlvblNldHRpbmdzIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5pbXBvcnQgeyBQb3B1cFdpdGhGb3JtIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQgeyBQb3B1cFdpdGhJbWFnZSB9IGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCB7IFBvcHVwV2l0aENvbmZpcm1hdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qc1wiO1xyXG5pbXBvcnQgXCIuLi9wYWdlcy9pbmRleC5jc3NcIjtcclxuXHJcbi8vIEFQSSBJbml0aWFsaXplZFxyXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcclxuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxXCIsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogXCI5MWI2MDFjYy1kNWIyLTQwNWQtYTIxYS02MTRlN2U4ZjU3ZTdcIixcclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXHJcbiAgfVxyXG59KTtcclxuXHJcbi8vIFJlbmRlciBpbml0aWFsIGNhcmRzXHJcbmNvbnN0IHNlY3Rpb24gPSBuZXcgU2VjdGlvbih7XHJcbiAgcmVuZGVyZXI6IChjYXJkRGF0YSkgPT4ge1xyXG4gICAgY29uc3QgY2FyZEVsZW1lbnQgPSBjcmVhdGVDYXJkKGNhcmREYXRhKTtcclxuICAgIHNlY3Rpb24uYWRkSXRlbXMoY2FyZEVsZW1lbnQpO1xyXG4gICAgfVxyXG4gIH0sICcuZ2FsYXJ5X19jYXJkcycpO1xyXG4gIFxyXG5cclxuY29uc3QgdXNlciA9IG5ldyBVc2VySW5mbyhcIiNuYW1lXCIsIFwiI2Rlc2NyaXB0aW9uXCIsIFwiI2F2YXRhclwiKTtcclxuXHJcbi8vR2V0IFVzZXIgaW5mb1xyXG5hcGkuZ2V0VXNlckluZm8oKVxyXG4udGhlbih1c2VyRGF0YSA9PiB7XHJcbiAgdXNlci5zZXRVc2VySW5mbyhcclxuICAgIHtuYW1lOiB1c2VyRGF0YS5uYW1lLFxyXG4gICAgICBhYm91dDogdXNlckRhdGEuYWJvdXQsXHJcbiAgICAgIGF2YXRhcjogdXNlckRhdGEuYXZhdGFyfSk7XHJcbn0pXHJcbi5jYXRjaChlcnIgPT4ge1xyXG4gIGNvbnNvbGUuZXJyb3IoYEVycm9yIGZldGNoaW5nIHVzZXIgaW5mbzogJHtlcnJ9YCk7XHJcbn0pO1xyXG5cclxuYXBpLmdldEluaXRpYWxDYXJkcygpXHJcbiAgLnRoZW4oY2FyZHMgPT4ge1xyXG4gICAgc2VjdGlvbi5yZW5kZXJJdGVtcyhjYXJkcyk7XHJcbiAgfSlcclxuICAuY2F0Y2goZXJyID0+IHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGZldGN0aW5nIGNhcmRzOiAke2Vycn1gKTtcclxuICB9KVxyXG5cclxuXHJcbi8qIEVsZW1lbnRzICovIFxyXG5cclxuLy9wb3B1cHNcclxuY29uc3QgZWRpdFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oJyNwcm9maWxlLWVkaXQtbW9kYWwnLCBoYW5kbGVQcm9maWxlU3VibWl0KTtcclxuY29uc3QgYWRkQ2FyZFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oJyNhZGQtY2FyZC1tb2RhbCcsIGhhbmRsZUFkZENhcmRTdWJtaXQpO1xyXG5jb25zdCBpbWFnZVBvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKCcjaW1hZ2UtbW9kYWwnLCBoYW5kbGVJbWFnZUNsaWNrKTsgXHJcbmNvbnN0IGRlbGV0ZVBvcHVwID0gbmV3IFBvcHVwV2l0aENvbmZpcm1hdGlvbignI2RlbGV0ZS1tb2RhbCcpO1xyXG5jb25zdCBhdmF0YXJQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKCcjYXZhdGFyLW1vZGFsJywgaGFuZGxlQXZhdGFyU3VibWl0KTtcclxuXHJcbi8vYnV0dG9uXHJcbmNvbnN0IHByb2ZpbGVFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Byb2ZpbGUtZWRpdC1idXR0b24nKTtcclxuY29uc3QgYWRkTmV3Q2FyZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1hZGQtYnV0dG9uXCIpO1xyXG5jb25zdCBhdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2F2YXRhci1vdmVybGF5XCIpO1xyXG5cclxuLy9wcm9maWxlIG5hbWUgJiBkZXNjcmlwdGlvbiAvIHVzZXIgaW5mbyAvIHVzZSBQcm9maWxlIGltZ1xyXG5jb25zdCB1c2VyTmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYW1lLWlucHV0XCIpO1xyXG5jb25zdCB1c2VySm9iSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Rlc2NyaXB0aW9uLWlucHV0XCIpO1xyXG5cclxuXHJcblxyXG4vL2Zvcm1zXHJcbmNvbnN0IHByb2ZpbGVFZGl0Rm9ybUVsZW1lbnQgPSBkb2N1bWVudC5mb3Jtc1tcInByb2ZpbGUtZWRpdC1mb3JtXCJdO1xyXG5jb25zdCBwcm9maWxlQWRkRm9ybUVsZW1lbnQgPSBkb2N1bWVudC5mb3Jtc1tcImFkZC1jYXJkLWZvcm1cIl07XHJcbmNvbnN0IGRlbGV0ZUZvcm1FbGVtZW50ID0gZG9jdW1lbnQuZm9ybXNbXCJkZWxldGUtZm9ybVwiXTtcclxuY29uc3QgYXZhdGFyRm9ybUVsZW1lbnQgPSBkb2N1bWVudC5mb3Jtc1tcImF2YXRhci1mb3JtXCJdXHJcblxyXG4vL3ZhbGlkYXRvcnNcclxuY29uc3QgZWRpdEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uU2V0dGluZ3MsIHByb2ZpbGVFZGl0Rm9ybUVsZW1lbnQpO1xyXG5jb25zdCBhZGRGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IodmFsaWRhdGlvblNldHRpbmdzLCBwcm9maWxlQWRkRm9ybUVsZW1lbnQpO1xyXG5jb25zdCBkZWxldGVGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IodmFsaWRhdGlvblNldHRpbmdzLCBkZWxldGVGb3JtRWxlbWVudCk7XHJcbmNvbnN0IGF2YXRhckZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uU2V0dGluZ3MsIGF2YXRhckZvcm1FbGVtZW50KTtcclxuXHJcbi8vRm9ybSBWYWxpZGF0b3JzXHJcbmVkaXRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuYWRkRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbmRlbGV0ZUZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5hdmF0YXJGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcblxyXG5cclxuLyogRnVuY3Rpb25zKi9cclxuLy9DcmVhdGUgQ2FyZFxyXG5mdW5jdGlvbiBjcmVhdGVDYXJkKGl0ZW0pIHtcclxuICBjb25zdCBjYXJkRWxlbWVudCA9IG5ldyBDYXJkKGl0ZW0sICcjY2FyZC10ZW1wbGF0ZScsIGhhbmRsZUltYWdlQ2xpY2ssIGhhbmRsZURlbGV0ZVN1Ym1pdCwgaGFuZGxlQ2FyZExpa2UpO1xyXG4gIHJldHVybiBjYXJkRWxlbWVudC5nZXRWaWV3KCk7XHJcbn1cclxuLypFdmVudCBIYW5kbGVycyovXHJcbi8vaW1hZ2UgY2xpY2tcclxuZnVuY3Rpb24gaGFuZGxlSW1hZ2VDbGljayhjYXJkRGF0YSkge1xyXG4gICAgaW1hZ2VQb3B1cC5vcGVuKGNhcmREYXRhKTtcclxufVxyXG5cclxuLy9lZGl0IHByb2ZpbGVcclxuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZVN1Ym1pdChkYXRhKSB7XHJcbiAgcmVuZGVyTG9hZGluZyh0cnVlLCBlZGl0UG9wdXApO1xyXG4gIGFwaS51cGRhdGVVc2VySW5mbyh7XHJcbiAgICBuYW1lOiBkYXRhLm5hbWUsXHJcbiAgICBhYm91dDogZGF0YS5hYm91dFxyXG4gIH0pXHJcbiAgICAudGhlbih1cGRhdGVkVXNlckRhdGEgPT4ge1xyXG4gICAgICB1c2VyLnNldFVzZXJJbmZvKHtcclxuICAgICAgICBuYW1lOiB1cGRhdGVkVXNlckRhdGEubmFtZSwgXHJcbiAgICAgICAgYWJvdXQ6IHVwZGF0ZWRVc2VyRGF0YS5hYm91dCB8fCB1cGRhdGVkVXNlckRhdGEuZGFzY3JpcHRpb24gfHwgdXBkYXRlZFVzZXJEYXRhLmJpb1xyXG4gICAgICB9KTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoYEVycm9yIHVwZGF0aW5nIHByb2ZpbGU6ICR7ZXJyfWApKVxyXG4gICAgLmZpbmFsbHkoKCkgPT57XHJcbiAgICAgIHJlbmRlckxvYWRpbmcoZmFsc2UsIGVkaXRQb3B1cCk7XHJcbiAgICAgIGVkaXRQb3B1cC5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgKVxyXG4gICB9XHJcblxyXG4vLyBBZGQgY2FyZFxyXG5mdW5jdGlvbiBoYW5kbGVBZGRDYXJkU3VibWl0KGRhdGEpIHtcclxuICBjb25zdCBjYXJkRGF0YSA9IHtcclxuICAgIG5hbWU6IGRhdGEudGl0bGUsXHJcbiAgICBsaW5rOiBkYXRhLnVybFxyXG4gIH07XHJcbiAgcmVuZGVyTG9hZGluZyh0cnVlLCBhZGRDYXJkUG9wdXApO1xyXG4gIC8vIENyZWF0ZSB0aGUgQ2FyZCBcclxuICBhcGkuYWRkTmV3Q2FyZChjYXJkRGF0YSlcclxuICAgIC50aGVuKChuZXdDYXJkRGF0YSkgPT4ge1xyXG4gICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGNyZWF0ZUNhcmQobmV3Q2FyZERhdGEpO1xyXG4gICAgICBzZWN0aW9uLmFkZEl0ZW1zKGNhcmRFbGVtZW50KTsgIFxyXG4gICAgICBhZGRDYXJkUG9wdXAuY2xvc2UoKTsgICAgICAgICAgICBcclxuICAgICAgcHJvZmlsZUFkZEZvcm1FbGVtZW50LnJlc2V0KCk7ICBcclxuICAgICAgYWRkRm9ybVZhbGlkYXRvci5kaXNhYmxlQnV0dG9uKCk7ICBcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgYWRkaW5nIGNhcmQ6ICR7ZXJyfWApO1xyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgcmVuZGVyTG9hZGluZyhmYWxzZSwgYWRkQ2FyZFBvcHVwKVxyXG4gICAgfVxyXG4gICAgKVxyXG59XHJcblxyXG5cclxuXHJcbi8vYXZhdGFyXHJcbmZ1bmN0aW9uIGhhbmRsZUF2YXRhclN1Ym1pdChkYXRhKXtcclxuICByZW5kZXJMb2FkaW5nKHRydWUsIGF2YXRhclBvcHVwKTtcclxuICBhcGkudXBkYXRlVXNlckF2YXRhcih7XHJcbiAgICBhdmF0YXI6IGRhdGEudXJsXHJcbiAgfSlcclxuICAgIC50aGVuKHVwZGF0ZVVzZXJEYXRhID0+IHtcclxuICAgICAgdXNlci5zZXRVc2VySW5mbyh7XHJcbiAgICAgICAgYXZhdGFyOiB1cGRhdGVVc2VyRGF0YS5hdmF0YXJcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgfSlcclxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihgRXJyb3IgdXBkYXRpbmcgYXZhdGFyOiAke2Vycn1gKSlcclxuICAgIC5maW5hbGx5KCgpID0+e1xyXG4gICAgICByZW5kZXJMb2FkaW5nKGZhbHNlLCBhdmF0YXJQb3B1cCk7XHJcbiAgICAgIGF2YXRhclBvcHVwLmNsb3NlKCk7XHJcbiAgICAgIGF2YXRhckZvcm1FbGVtZW50LnJlc2V0KCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy9kZWxldGVcclxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlU3VibWl0KGNhcmQpe1xyXG4gIHJlbmRlckxvYWRpbmcodHJ1ZSwgZGVsZXRlUG9wdXApO1xyXG4gIGRlbGV0ZVBvcHVwLnNldFN1Ym1pdEZ1bmN0aW9uKCgpID0+IHtcclxuICAgIGFwaS5kZWxldGVDYXJkKGNhcmQuX2lkKVxyXG4gICAgICAudGhlbihjYXJkID0+IHtcclxuICAgICAgICBjYXJkLnJlbW92ZUNhcmQoKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZGVsZXRpbmcgY2FyZCAke2Vycn1gKTtcclxuICAgICAgfSlcclxuICAgICAgLmZpbmFsbHkoKCk9PntcclxuICAgICAgICByZW5kZXJMb2FkaW5nKGZhbHNlLCBkZWxldGVQb3B1cCk7XHJcbiAgICAgICAgZGVsZXRlUG9wdXAuY2xvc2UoKTtcclxuICAgICAgfSlcclxuICBcclxuICB9KTtcclxuICBkZWxldGVQb3B1cC5vcGVuKCk7XHJcbiAgXHJcbn0gXHJcbiAgICBcclxuICBcclxuXHJcbi8vbGlrZVxyXG5mdW5jdGlvbiBoYW5kbGVDYXJkTGlrZShjYXJkKXtcclxuICBjb25zdCBpc0xpa2VkID0gY2FyZC5pc0xpa2VkKCk7IFxyXG5cclxuICBjb25zdCBsaWtlUHJvbWlzZSA9IGlzTGlrZWRcclxuICAgID8gYXBpLnJlbW92ZUxpa2UoY2FyZC5nZXRJZCgpKSAgXHJcbiAgICA6IGFwaS5hZGRMaWtlKGNhcmQuZ2V0SWQoKSk7IFxyXG5cclxuICBsaWtlUHJvbWlzZVxyXG4gICAgLnRoZW4odXBkYXRlZENhcmREYXRhID0+IHtcclxuICAgICAgY2FyZC51cGRhdGVMaWtlcyh1cGRhdGVkQ2FyZERhdGEuaXNMaWtlZCk7ICBcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoYEVycm9yIHVwZGF0aW5nIGxpa2Ugc3RhdHVzOiAke2Vycn1gKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9wZW5Nb2RhbChwb3B1cCkge1xyXG4gIGNvbnN0IGN1cnJlbnRVc2VyID0gdXNlci5nZXRVc2VySW5mbygpO1xyXG4gIHVzZXJOYW1lSW5wdXQudmFsdWUgPSBjdXJyZW50VXNlci5uYW1lO1xyXG4gIHVzZXJKb2JJbnB1dC52YWx1ZSA9IGN1cnJlbnRVc2VyLmFib3V0O1xyXG4gIHBvcHVwLm9wZW4oKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyTG9hZGluZyhpc1NhdmluZywgcG9wdXApe1xyXG4gIGlmKGlzU2F2aW5nKXtcclxuICAgIGlmKHBvcHVwID09IGRlbGV0ZVBvcHVwKXtcclxuICAgICAgcmV0dXJuIHBvcHVwLmNvbmZpcm1CdXR0b24udGV4dENvbnRlbnQgPSBcIkRlbGVhdGluZyBDYXJkXCI7XHJcbiAgICB9XHJcbiAgICBpZihwb3B1cCA9PSBhZGRDYXJkUG9wdXApe1xyXG4gICAgICByZXR1cm4gcG9wdXAuc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gXCJDcmVhdGluZyBDYXJkXCI7XHJcbiAgICB9XHJcbiAgICBpZiAocG9wdXAgPT0gZWRpdFBvcHVwIHx8IGF2YXRhclBvcHVwKXtcclxuICAgICAgcmV0dXJuIHBvcHVwLnN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2aW5nXCI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgICAgICBcclxuICB9XHJcbiAgZWxzZXtcclxuICAgIGlmKHBvcHVwID09IGRlbGV0ZVBvcHVwKXtcclxuICAgICAgcmV0dXJuIHBvcHVwLmNvbmZpcm1CdXR0b24udGV4dENvbnRlbnQgPSBcIlllc1wiO1xyXG4gICAgfVxyXG4gICAgaWYocG9wdXAgPT0gYWRkQ2FyZFBvcHVwKXtcclxuICAgICAgcmV0dXJuIHBvcHVwLnN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiQ3JlYXRlXCI7XHJcbiAgICB9XHJcbiAgICBpZihwb3B1cCA9PSBlZGl0UG9wdXAgfHwgYXZhdGFyUG9wdXApIHtcclxuICAgICAgcmV0dXJuIHBvcHVwLnN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2ZVwiO1xyXG4gICAgfVxyXG59fVxyXG5cclxuLy8gRXZlbnQgTGlzdGVuZXJzXHJcbmF2YXRhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+e29wZW5Nb2RhbChhdmF0YXJQb3B1cCl9KVxyXG5cclxucHJvZmlsZUVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PntvcGVuTW9kYWwoZWRpdFBvcHVwKX0pO1xyXG5cclxuYWRkTmV3Q2FyZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICBhZGRDYXJkUG9wdXAub3BlbigpO1xyXG59KTtcclxuXHJcblxyXG5cclxuZWRpdFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbmFkZENhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5pbWFnZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbmRlbGV0ZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbmF2YXRhclBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gIGNvbnN0cnVjdG9yKHtkYXRhLCByZW5kZXJlcn0sIGNvbnRhaW5lclNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9kYXRhID0gZGF0YTtcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckl0ZW1zKGRhdGEpIHtcclxuICAgIGRhdGEuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbiAgYWRkSXRlbXMoZWxlbWVudCkge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XHJcbiAgfVxyXG5cclxuXHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mb3tcclxuICBjb25zdHJ1Y3RvcihuYW1lU2VsY3Rvciwgam9iU2VsZWN0b3IsIGF2YXRhclNlbGVjdG9yKXtcclxuICAgIHRoaXMuX25hbWVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuYW1lU2VsY3Rvcik7XHJcbiAgICB0aGlzLl9qb2JFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihqb2JTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9hdmF0YXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXJTZWxlY3RvcilcclxuICAgIFxyXG4gIH1cclxuICBnZXRVc2VySW5mbygpe1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmFtZTogdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQsIFxyXG4gICAgICBhYm91dDogdGhpcy5fam9iRWxlbWVudC50ZXh0Q29udGVudCxcclxuICAgICAgYXZhdGFyOiB0aGlzLl9hdmF0YXJFbGVtZW50LnNyY307ICAgIFxyXG4gIH1cclxuICBzZXRVc2VySW5mbyhkYXRhKXtcclxuICAgIGlmIChkYXRhLm5hbWUpIHRoaXMuX25hbWVFbGVtZW50LnRleHRDb250ZW50ID0gZGF0YS5uYW1lO1xyXG4gICAgaWYoZGF0YS5hYm91dCkgdGhpcy5fam9iRWxlbWVudC50ZXh0Q29udGVudCA9IGRhdGEuYWJvdXQ7XHJcbiAgICBpZihkYXRhLmF2YXRhcikgdGhpcy5fYXZhdGFyRWxlbWVudC5zcmMgPSBkYXRhLmF2YXRhcjtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBkYXRhKSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX3BvcHVwSW1hZ2UgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19pbWFnZScpO1xyXG4gICAgdGhpcy5fcG9wdXBUaXRsZSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWxfX2NhcmQtdGl0bGUnKTtcclxuICAgIFxyXG4gICAgXHJcblxyXG4gIH1cclxuICBvcGVuKGRhdGEpe1xyXG4gICAvLyBzZXQgdGhlIGltYWdlJ3Mgc3JjIGFuZCBhbHRcclxuICAgIHRoaXMuX3BvcHVwSW1hZ2Uuc3JjID0gZGF0YS5saW5rO1xyXG4gICAgdGhpcy5fcG9wdXBJbWFnZS5hbHQgPSBkYXRhLm5hbWU7XHJcbiAgIC8vIHNldCB0aGUgY2FwdGlvbidzIHRleHRDb250ZW50XHJcbiAgICB0aGlzLl9wb3B1cFRpdGxlLnRleHRDb250ZW50ID0gZGF0YS5uYW1lO1xyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gIH1cclxufSIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvcHVwV2l0aENvbmZpcm1hdGlvbiBleHRlbmRzIFBvcHVwe1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3Ipe1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9jb25maXJtQnV0dG9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fYnV0dG9uJyk7XHJcbiAgfVxyXG5cclxuICBzZXRTdWJtaXRGdW5jdGlvbihzdWJtaXRGdW5jdGlvbil7XHJcbiAgICB0aGlzLl9oYW5kbGVDb25maXJtID0gc3VibWl0RnVuY3Rpb25cclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTsnJ1xyXG4gICAgdGhpcy5fY29uZmlybUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+e1xyXG4gICAgICB0aGlzLl9oYW5kbGVDb25maXJtKCk7XHJcbiAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuIl0sIm5hbWVzIjpbIkFwaSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInRoaXMiLCJfYmFzZVVybCIsImJhc2VVcmwiLCJfaGVhZGVycyIsImhlYWRlcnMiLCJfY2hlY2tSZXNwb25zZSIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJfcmVxdWVzdCIsInVybCIsImZldGNoIiwidGhlbiIsImdldEluaXRpYWxDYXJkcyIsIm1ldGhvZCIsImdldFVzZXJJbmZvIiwidXBkYXRlVXNlckluZm8iLCJkYXRhIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1cGRhdGVVc2VyQXZhdGFyIiwiYXZhdGFyIiwiYWRkTmV3Q2FyZCIsIm5hbWUiLCJsaW5rIiwiZGVsZXRlQ2FyZCIsImNhcmRJZCIsImFkZExpa2UiLCJyZW1vdmVMaWtlIiwiYXV0aG91cml6YXRpb24iLCJDYXJkIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlSW1hZ2VDbGljayIsImhhbmRsZURlbGV0ZVN1Ym1pdCIsImhhbmRsZUNhcmRMaWtlIiwiX2lkIiwiX25hbWUiLCJfbGluayIsIl9pc0xpa2VkIiwiaXNMaWtlZCIsIl91c2VySWQiLCJvd25lciIsIl9jYXJkU2VsZWN0b3IiLCJfaGFuZGxlSW1hZ2VDbGljayIsIl9oYW5kbGVEZWxldGVTdWJtaXQiLCJfaGFuZGxlQ2FyZExpa2UiLCJfZWxlbWVudCIsIl9nZXRUZW1wbGF0ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfbGlrZUJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJfZGVsZXRlQnV0dG9uIiwiX2NhcmRJbWFnZUVsZW1lbnQiLCJ1cGRhdGVMaWtlcyIsInVwZGF0ZWRMaWtlIiwidG9nZ2xlTGlrZUljb24iLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJnZXRJZCIsInJlbW92ZUNhcmQiLCJfY2FyZEVsZW1lbnQiLCJyZW1vdmUiLCJnZXRWaWV3Iiwic2V0QXR0cmlidXRlIiwidGV4dENvbnRlbnQiLCJGb3JtVmFsaWRhdG9yIiwic2V0dGluZ3MiLCJmb3JtRWxlbWVudCIsIl9pbnB1dFNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9mb3JtIiwiX2lucHV0RWxzIiwicXVlcnlTZWxlY3RvckFsbCIsIl9zdWJtaXRCdXR0b24iLCJfaGlkZUlucHV0RXJyb3IiLCJpbnB1dEVsIiwiZXJyb3JNZXNzYWdlRWwiLCJpZCIsIl9zaG93SW5wdXRFcnJvciIsImFkZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hhc0ludmFsaWRJbnB1dCIsInNvbWUiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiZGlzYWJsZUJ1dHRvbiIsIl9lbmFibGVCdXR0b24iLCJkaXNhYmxlZCIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJmb3JFYWNoIiwic2V0VGltZW91dCIsImVuYWJsZVZhbGlkYXRpb24iLCJlIiwicHJldmVudERlZmF1bHQiLCJ2YWxpZGF0aW9uU2V0dGluZ3MiLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXBFbGVtZW50Iiwib3BlbiIsIl9oYW5kbGVFc2NhcGVDbG9zZSIsImNsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImV2ZW50Iiwia2V5Iiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJfY2xvc2VCdXR0b24iLCJ0YXJnZXQiLCJjb250YWlucyIsIlBvcHVwV2l0aEZvcm0iLCJoYW5kbGVGb3JtU3VibWl0Iiwic3VwZXIiLCJfcG9wdXBGb3JtIiwiX2hhbmRsZUZvcm1TdWJtaXQiLCJpbnB1dExpc3QiLCJzdWJtaXRCdXR0b24iLCJpbnB1dFZhbHVlcyIsIl9nZXRJbnB1dFZhbHVlcyIsImZvcm1WYWx1ZXMiLCJpbnB1dCIsInZhbHVlIiwidHJpbSIsInNldElucHV0VmFsdWVzIiwiY29uc29sZSIsImxvZyIsImFwaSIsImF1dGhvcml6YXRpb24iLCJzZWN0aW9uIiwiX3JlZiIsImNvbnRhaW5lclNlbGVjdG9yIiwicmVuZGVyZXIiLCJfZGF0YSIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJyZW5kZXJJdGVtcyIsIml0ZW0iLCJhZGRJdGVtcyIsImVsZW1lbnQiLCJwcmVwZW5kIiwiY2FyZERhdGEiLCJjYXJkRWxlbWVudCIsImNyZWF0ZUNhcmQiLCJ1c2VyIiwibmFtZVNlbGN0b3IiLCJqb2JTZWxlY3RvciIsImF2YXRhclNlbGVjdG9yIiwiX25hbWVFbGVtZW50IiwiX2pvYkVsZW1lbnQiLCJfYXZhdGFyRWxlbWVudCIsImFib3V0Iiwic3JjIiwic2V0VXNlckluZm8iLCJ1c2VyRGF0YSIsImNhdGNoIiwiZXJyIiwiZXJyb3IiLCJjYXJkcyIsImVkaXRQb3B1cCIsInJlbmRlckxvYWRpbmciLCJ1cGRhdGVkVXNlckRhdGEiLCJkYXNjcmlwdGlvbiIsImJpbyIsImZpbmFsbHkiLCJhZGRDYXJkUG9wdXAiLCJ0aXRsZSIsIm5ld0NhcmREYXRhIiwicHJvZmlsZUFkZEZvcm1FbGVtZW50IiwicmVzZXQiLCJhZGRGb3JtVmFsaWRhdG9yIiwiaW1hZ2VQb3B1cCIsIl9wb3B1cEltYWdlIiwiX3BvcHVwVGl0bGUiLCJhbHQiLCJkZWxldGVQb3B1cCIsIl9jb25maXJtQnV0dG9uIiwic2V0U3VibWl0RnVuY3Rpb24iLCJzdWJtaXRGdW5jdGlvbiIsIl9oYW5kbGVDb25maXJtIiwiYXZhdGFyUG9wdXAiLCJ1cGRhdGVVc2VyRGF0YSIsImF2YXRhckZvcm1FbGVtZW50IiwicHJvZmlsZUVkaXRCdXR0b24iLCJhZGROZXdDYXJkQnV0dG9uIiwidXNlck5hbWVJbnB1dCIsInVzZXJKb2JJbnB1dCIsInByb2ZpbGVFZGl0Rm9ybUVsZW1lbnQiLCJmb3JtcyIsImRlbGV0ZUZvcm1FbGVtZW50IiwiZWRpdEZvcm1WYWxpZGF0b3IiLCJkZWxldGVGb3JtVmFsaWRhdG9yIiwiYXZhdGFyRm9ybVZhbGlkYXRvciIsImNhcmQiLCJ1cGRhdGVkQ2FyZERhdGEiLCJvcGVuTW9kYWwiLCJwb3B1cCIsImN1cnJlbnRVc2VyIiwiaXNTYXZpbmciLCJjb25maXJtQnV0dG9uIl0sInNvdXJjZVJvb3QiOiIifQ==